import request = require('request');
import { IDownloadLink, IFalsePositive, IFalsePositiveEngine, IMalwareHashFeed } from './interfaces';
// import { stringify as querify } from 'querystring';
class MalwareSampleSharing {
    private api: string;
    constructor(api: string) {
        this.api = api;
    }
    public maliciousHashFeed(page?: number): Promise<IMalwareHashFeed> {
        return new Promise((resolve, reject) => {
            request.get(
                `https://api.metadefender.com/v4/feed/hashes?page=${page ? page : 1}`,
                {
                    headers: {
                        apikey: this.api
                    }
                },
                (err, res) => {
                    if (err) {
                        reject(err);
                    } else {
                        // tslint:disable-next-line: no-unsafe-any
                        resolve(JSON.parse(res.body));
                    }
                }
            );
        });
    }
    public falsePositive(page?: number): Promise<IFalsePositive> {
        return new Promise((resolve, reject) => {
            request.get(
                `https://api.metadefender.com/v4/feed/false-positives?page=${page ? page : 1}`,
                {
                    headers: {
                        apikey: this.api
                    }
                },
                (err, res) => {
                    if (err) {
                        reject(err);
                    } else {
                        // tslint:disable-next-line: no-unsafe-any
                        resolve(JSON.parse(res.body));
                    }
                }
            );
        });
    }
    public falsePositiveEngine(engine: string, page?: number): Promise<IFalsePositiveEngine> {
        return new Promise((resolve, reject) => {
            request.get(
                `https://api.metadefender.com/v4/feed/false-positives/${engine}?page=${page ? page : 1}`,
                {
                    headers: {
                        apikey: this.api
                    }
                },
                (err, res) => {
                    if (err) {
                        reject(err);
                    } else {
                        // tslint:disable-next-line: no-unsafe-any
                        resolve(JSON.parse(res.body));
                    }
                }
            );
        });
    }
    public downloadLink(hash: string): Promise<IDownloadLink> {
        return new Promise((res, rej) => {
            request.get(
                `https://api.metadefender.com/v4/file/${hash}/download`,
                {
                    headers: {
                        apikey: this.api
                    }
                },
                (err, r) => {
                    if (err) {
                        rej(err);
                    } else {
                        // tslint:disable-next-line: no-unsafe-any
                        res(JSON.parse(r.body));
                    }
                }
            );
        });
    }
}

export default MalwareSampleSharing;
